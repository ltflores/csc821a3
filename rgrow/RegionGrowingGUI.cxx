// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "RegionGrowingGUI.h"

void RegionGrowingGUI::cb_Connected_i(Fl_Button*, void*) {
  m_ConnectedThresholdImageFilter->Update();
}
void RegionGrowingGUI::cb_Connected(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_Connected_i(o,v);
}

void RegionGrowingGUI::cb_lowerThresholdCounter_i(Fl_Counter* o, void*) {
  m_ConnectedThresholdImageFilter->SetLower( static_cast<InputPixelType>( o->value() ) );
}
void RegionGrowingGUI::cb_lowerThresholdCounter(Fl_Counter* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_lowerThresholdCounter_i(o,v);
}

void RegionGrowingGUI::cb_upperThresholdCounter_i(Fl_Counter* o, void*) {
  m_ConnectedThresholdImageFilter->SetUpper( static_cast<InputPixelType>( o->value() ) );
}
void RegionGrowingGUI::cb_upperThresholdCounter(Fl_Counter* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_upperThresholdCounter_i(o,v);
}

void RegionGrowingGUI::cb_thresholdConnectedImageButton_i(fltk::LightButton*, void*) {
  this->ShowConnectedThresholdImage();
}
void RegionGrowingGUI::cb_thresholdConnectedImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_thresholdConnectedImageButton_i(o,v);
}

void RegionGrowingGUI::cb_confidence_i(Fl_Button*, void*) {
  m_ConfidenceConnectedImageFilter->Update();
}
void RegionGrowingGUI::cb_confidence(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_confidence_i(o,v);
}

void RegionGrowingGUI::cb_multiplierValueInput_i(Fl_Value_Input* o, void*) {
  m_ConfidenceConnectedImageFilter->SetMultiplier( o->value() );
}
void RegionGrowingGUI::cb_multiplierValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_multiplierValueInput_i(o,v);
}

void RegionGrowingGUI::cb_iterationsConfidenceValueInput_i(Fl_Value_Input* o, void*) {
  m_ConfidenceConnectedImageFilter->SetNumberOfIterations( static_cast<unsigned int>( o->value() ) );
}
void RegionGrowingGUI::cb_iterationsConfidenceValueInput(Fl_Value_Input* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_iterationsConfidenceValueInput_i(o,v);
}

void RegionGrowingGUI::cb_confidenceConnectedImageButton_i(fltk::LightButton*, void*) {
  this->ShowConfidenceConnectedImage();
}
void RegionGrowingGUI::cb_confidenceConnectedImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_confidenceConnectedImageButton_i(o,v);
}

void RegionGrowingGUI::cb_inputImageButton_i(fltk::LightButton*, void*) {
  ShowInputImage();
}
void RegionGrowingGUI::cb_inputImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_inputImageButton_i(o,v);
}

void RegionGrowingGUI::cb_homogeneousImageButton_i(fltk::LightButton*, void*) {
  ShowHomogeneousImage();
}
void RegionGrowingGUI::cb_homogeneousImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_homogeneousImageButton_i(o,v);
}

void RegionGrowingGUI::cb_homogeneousImageVTKButton_i(fltk::LightButton*, void*) {
  ShowHomogeneousImageWithVTK();
}
void RegionGrowingGUI::cb_homogeneousImageVTKButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_homogeneousImageVTKButton_i(o,v);
}

void RegionGrowingGUI::cb_customRegionGrowingImageButton_i(fltk::LightButton*, void*) {
  this->ShowCustomRegionGrowingImage();
}
void RegionGrowingGUI::cb_customRegionGrowingImageButton(fltk::LightButton* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_customRegionGrowingImageButton_i(o,v);
}

void RegionGrowingGUI::cb_Custom_i(Fl_Button*, void*) {
  m_CustomRegionGrowingImageFilter->Update();
}
void RegionGrowingGUI::cb_Custom(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

void RegionGrowingGUI::cb_quit_i(Fl_Button*, void*) {
  this->Quit();
}
void RegionGrowingGUI::cb_quit(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->user_data()))->cb_quit_i(o,v);
}

void RegionGrowingGUI::cb_load_i(Fl_Button*, void*) {
  this->LoadInputImage();
}
void RegionGrowingGUI::cb_load(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->user_data()))->cb_load_i(o,v);
}

void RegionGrowingGUI::cb_load1_i(Fl_Button*, void*) {
  this->LoadInputImageSeries();
}
void RegionGrowingGUI::cb_load1(Fl_Button* o, void* v) {
  ((RegionGrowingGUI*)(o->parent()->user_data()))->cb_load1_i(o,v);
}

RegionGrowingGUI::RegionGrowingGUI() {
  { consoleWindow = new Fl_Double_Window(647, 425, "Region Growing");
    consoleWindow->user_data((void*)(this));
    { controlsGroup = new Fl_Group(10, 22, 615, 323);
      { seedGroup = new Fl_Group(315, 39, 310, 51, "Seed Point");
        { xSeedPointValueOutput = new Fl_Value_Output(360, 46, 70, 26, "x");
          xSeedPointValueOutput->step(0.01);
        } // Fl_Value_Output* xSeedPointValueOutput
        { ySeedPointValueOutput = new Fl_Value_Output(450, 44, 70, 28, "y");
          ySeedPointValueOutput->step(0.01);
        } // Fl_Value_Output* ySeedPointValueOutput
        { zSeedPointValueOutput = new Fl_Value_Output(540, 44, 70, 28, "z");
          zSeedPointValueOutput->step(0.01);
        } // Fl_Value_Output* zSeedPointValueOutput
        seedGroup->end();
      } // Fl_Group* seedGroup
      { Fl_Button* o = new Fl_Button(24, 150, 170, 30, "Connected Threshold");
        o->box(FL_ROUNDED_BOX);
        o->callback((Fl_Callback*)cb_Connected);
      } // Fl_Button* o
      { Fl_Counter* o = lowerThresholdCounter = new Fl_Counter(220, 175, 245, 20, "lower");
        lowerThresholdCounter->minimum(0);
        lowerThresholdCounter->maximum(1e+009);
        lowerThresholdCounter->step(1e+008);
        lowerThresholdCounter->value(1e+008);
        lowerThresholdCounter->callback((Fl_Callback*)cb_lowerThresholdCounter);
        o->lstep(10.0);
      } // Fl_Counter* lowerThresholdCounter
      { Fl_Counter* o = upperThresholdCounter = new Fl_Counter(225, 125, 240, 20, "upper");
        upperThresholdCounter->minimum(0);
        upperThresholdCounter->maximum(1e+009);
        upperThresholdCounter->step(1e+008);
        upperThresholdCounter->value(1e+008);
        upperThresholdCounter->callback((Fl_Callback*)cb_upperThresholdCounter);
        o->lstep( 10.0 );
      } // Fl_Counter* upperThresholdCounter
      { thresholdConnectedImageButton = new fltk::LightButton(475, 150, 105, 20, "show image");
        thresholdConnectedImageButton->type(0);
        thresholdConnectedImageButton->box(FL_UP_BOX);
        thresholdConnectedImageButton->color(FL_BACKGROUND_COLOR);
        thresholdConnectedImageButton->selection_color((Fl_Color)1);
        thresholdConnectedImageButton->labeltype(FL_NORMAL_LABEL);
        thresholdConnectedImageButton->labelfont(0);
        thresholdConnectedImageButton->labelsize(14);
        thresholdConnectedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        thresholdConnectedImageButton->callback((Fl_Callback*)cb_thresholdConnectedImageButton);
        thresholdConnectedImageButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        thresholdConnectedImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* thresholdConnectedImageButton
      { Fl_Button* o = new Fl_Button(23, 237, 170, 30, "confidence connected");
        o->box(FL_ROUNDED_BOX);
        o->callback((Fl_Callback*)cb_confidence);
      } // Fl_Button* o
      { multiplierValueInput = new Fl_Value_Input(270, 239, 50, 24, "multiplier");
        multiplierValueInput->maximum(100);
        multiplierValueInput->value(2.5);
        multiplierValueInput->callback((Fl_Callback*)cb_multiplierValueInput);
      } // Fl_Value_Input* multiplierValueInput
      { iterationsConfidenceValueInput = new Fl_Value_Input(400, 238, 50, 24, "iterations");
        iterationsConfidenceValueInput->minimum(1);
        iterationsConfidenceValueInput->maximum(100);
        iterationsConfidenceValueInput->value(2);
        iterationsConfidenceValueInput->callback((Fl_Callback*)cb_iterationsConfidenceValueInput);
      } // Fl_Value_Input* iterationsConfidenceValueInput
      { confidenceConnectedImageButton = new fltk::LightButton(485, 240, 105, 20, "show image");
        confidenceConnectedImageButton->type(0);
        confidenceConnectedImageButton->box(FL_UP_BOX);
        confidenceConnectedImageButton->color(FL_BACKGROUND_COLOR);
        confidenceConnectedImageButton->selection_color(FL_YELLOW);
        confidenceConnectedImageButton->labeltype(FL_NORMAL_LABEL);
        confidenceConnectedImageButton->labelfont(0);
        confidenceConnectedImageButton->labelsize(14);
        confidenceConnectedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        confidenceConnectedImageButton->callback((Fl_Callback*)cb_confidenceConnectedImageButton);
        confidenceConnectedImageButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        confidenceConnectedImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* confidenceConnectedImageButton
      { inputImageButton = new fltk::LightButton(60, 70, 135, 20, "inputImagButton");
        inputImageButton->type(0);
        inputImageButton->box(FL_UP_BOX);
        inputImageButton->color(FL_BACKGROUND_COLOR);
        inputImageButton->selection_color(FL_YELLOW);
        inputImageButton->labeltype(FL_NORMAL_LABEL);
        inputImageButton->labelfont(0);
        inputImageButton->labelsize(14);
        inputImageButton->labelcolor(FL_FOREGROUND_COLOR);
        inputImageButton->callback((Fl_Callback*)cb_inputImageButton);
        inputImageButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        inputImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* inputImageButton
      { homogeneousImageButton = new fltk::LightButton(460, 90, 155, 20, "homogeneous Image");
        homogeneousImageButton->type(0);
        homogeneousImageButton->box(FL_UP_BOX);
        homogeneousImageButton->color(FL_BACKGROUND_COLOR);
        homogeneousImageButton->selection_color(FL_YELLOW);
        homogeneousImageButton->labeltype(FL_NORMAL_LABEL);
        homogeneousImageButton->labelfont(0);
        homogeneousImageButton->labelsize(14);
        homogeneousImageButton->labelcolor(FL_FOREGROUND_COLOR);
        homogeneousImageButton->callback((Fl_Callback*)cb_homogeneousImageButton);
        homogeneousImageButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        homogeneousImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* homogeneousImageButton
      { homogeneousImageVTKButton = new fltk::LightButton(60, 95, 135, 20, "VTK Render");
        homogeneousImageVTKButton->box(FL_UP_BOX);
        homogeneousImageVTKButton->color(FL_BACKGROUND_COLOR);
        homogeneousImageVTKButton->selection_color((Fl_Color)1);
        homogeneousImageVTKButton->labeltype(FL_NORMAL_LABEL);
        homogeneousImageVTKButton->labelfont(0);
        homogeneousImageVTKButton->labelsize(14);
        homogeneousImageVTKButton->labelcolor(FL_FOREGROUND_COLOR);
        homogeneousImageVTKButton->callback((Fl_Callback*)cb_homogeneousImageVTKButton);
        homogeneousImageVTKButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        homogeneousImageVTKButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* homogeneousImageVTKButton
      { customRegionGrowingImageButton = new fltk::LightButton(217, 306, 105, 25, "show image");
        customRegionGrowingImageButton->box(FL_UP_BOX);
        customRegionGrowingImageButton->color(FL_BACKGROUND_COLOR);
        customRegionGrowingImageButton->selection_color(FL_YELLOW);
        customRegionGrowingImageButton->labeltype(FL_NORMAL_LABEL);
        customRegionGrowingImageButton->labelfont(0);
        customRegionGrowingImageButton->labelsize(14);
        customRegionGrowingImageButton->labelcolor(FL_FOREGROUND_COLOR);
        customRegionGrowingImageButton->callback((Fl_Callback*)cb_customRegionGrowingImageButton);
        customRegionGrowingImageButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        customRegionGrowingImageButton->when(FL_WHEN_RELEASE);
      } // fltk::LightButton* customRegionGrowingImageButton
      { Fl_Button* o = new Fl_Button(20, 302, 174, 33, "Custom Region Growing");
        o->box(FL_ROUNDED_BOX);
        o->callback((Fl_Callback*)cb_Custom);
      } // Fl_Button* o
      controlsGroup->end();
    } // Fl_Group* controlsGroup
    { Fl_Button* o = new Fl_Button(280, 370, 90, 30, "quit");
      o->box(FL_ROUNDED_BOX);
      o->callback((Fl_Callback*)cb_quit);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(135, 20, 90, 35, "load file");
      o->box(FL_ROUNDED_BOX);
      o->callback((Fl_Callback*)cb_load);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(35, 20, 90, 35, "load DICOM");
      o->box(FL_ROUNDED_BOX);
      o->callback((Fl_Callback*)cb_load1);
    } // Fl_Button* o
    consoleWindow->end();
  } // Fl_Double_Window* consoleWindow
}
