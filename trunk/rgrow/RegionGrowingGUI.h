// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef RegionGrowingGUI_h
#define RegionGrowingGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <RegionGrowingBase.h>
#include <fltkLightButton.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Value_Input.H>

class RegionGrowingGUI : public RegionGrowingBase {
public:
  RegionGrowingGUI();
  Fl_Double_Window *consoleWindow;
  Fl_Group *controlsGroup;
  Fl_Group *seedGroup;
  Fl_Value_Output *xSeedPointValueOutput;
  Fl_Value_Output *ySeedPointValueOutput;
  Fl_Value_Output *zSeedPointValueOutput;
private:
  void cb_Connected_i(Fl_Button*, void*);
  static void cb_Connected(Fl_Button*, void*);
public:
  Fl_Counter *lowerThresholdCounter;
private:
  void cb_lowerThresholdCounter_i(Fl_Counter*, void*);
  static void cb_lowerThresholdCounter(Fl_Counter*, void*);
public:
  Fl_Counter *upperThresholdCounter;
private:
  void cb_upperThresholdCounter_i(Fl_Counter*, void*);
  static void cb_upperThresholdCounter(Fl_Counter*, void*);
public:
  fltk::LightButton *thresholdConnectedImageButton;
private:
  void cb_thresholdConnectedImageButton_i(fltk::LightButton*, void*);
  static void cb_thresholdConnectedImageButton(fltk::LightButton*, void*);
  void cb_confidence_i(Fl_Button*, void*);
  static void cb_confidence(Fl_Button*, void*);
public:
  Fl_Value_Input *multiplierValueInput;
private:
  void cb_multiplierValueInput_i(Fl_Value_Input*, void*);
  static void cb_multiplierValueInput(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *iterationsConfidenceValueInput;
private:
  void cb_iterationsConfidenceValueInput_i(Fl_Value_Input*, void*);
  static void cb_iterationsConfidenceValueInput(Fl_Value_Input*, void*);
public:
  fltk::LightButton *confidenceConnectedImageButton;
private:
  void cb_confidenceConnectedImageButton_i(fltk::LightButton*, void*);
  static void cb_confidenceConnectedImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *inputImageButton;
private:
  void cb_inputImageButton_i(fltk::LightButton*, void*);
  static void cb_inputImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *homogeneousImageButton;
private:
  void cb_homogeneousImageButton_i(fltk::LightButton*, void*);
  static void cb_homogeneousImageButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *homogeneousImageVTKButton;
private:
  void cb_homogeneousImageVTKButton_i(fltk::LightButton*, void*);
  static void cb_homogeneousImageVTKButton(fltk::LightButton*, void*);
public:
  fltk::LightButton *customRegionGrowingImageButton;
private:
  void cb_customRegionGrowingImageButton_i(fltk::LightButton*, void*);
  static void cb_customRegionGrowingImageButton(fltk::LightButton*, void*);
  void cb_Custom_i(Fl_Button*, void*);
  static void cb_Custom(Fl_Button*, void*);
  void cb_quit_i(Fl_Button*, void*);
  static void cb_quit(Fl_Button*, void*);
  void cb_load_i(Fl_Button*, void*);
  static void cb_load(Fl_Button*, void*);
  void cb_load1_i(Fl_Button*, void*);
  static void cb_load1(Fl_Button*, void*);
public:
  ~RegionGrowingGUI();
  virtual void Quit( void );
  virtual void Load( void );
  virtual void ShowInputImage( void );
  virtual void ShowConnectedThresholdImage( void );
  virtual void ShowConsole( void );
  virtual void ShowConfidenceConnectedImage( void );
  virtual void UpdateExtract();
  virtual void ShowHomogeneousImage( void );
  virtual void LoadDicom( void );
  virtual void ShowHomogeneousImageWithVTK( void );
  virtual void ShowCustomRegionGrowingImage( void );
};
#endif
